// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AcuriSaaSClient is the client API for AcuriSaaS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcuriSaaSClient interface {
	// GetElementList accepts platform identity otherwise also known as customer identity which a Scurid issued identity for the customer.
	// returns array of elements / hardware that are available for the customer
	GetElementList(ctx context.Context, in *GetElementListReq, opts ...grpc.CallOption) (*GetElementListRes, error)
}

type acuriSaaSClient struct {
	cc grpc.ClientConnInterface
}

func NewAcuriSaaSClient(cc grpc.ClientConnInterface) AcuriSaaSClient {
	return &acuriSaaSClient{cc}
}

func (c *acuriSaaSClient) GetElementList(ctx context.Context, in *GetElementListReq, opts ...grpc.CallOption) (*GetElementListRes, error) {
	out := new(GetElementListRes)
	err := c.cc.Invoke(ctx, "/acuri.v0.AcuriSaaS/GetElementList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcuriSaaSServer is the server API for AcuriSaaS service.
// All implementations must embed UnimplementedAcuriSaaSServer
// for forward compatibility
type AcuriSaaSServer interface {
	// GetElementList accepts platform identity otherwise also known as customer identity which a Scurid issued identity for the customer.
	// returns array of elements / hardware that are available for the customer
	GetElementList(context.Context, *GetElementListReq) (*GetElementListRes, error)
	mustEmbedUnimplementedAcuriSaaSServer()
}

// UnimplementedAcuriSaaSServer must be embedded to have forward compatible implementations.
type UnimplementedAcuriSaaSServer struct {
}

func (UnimplementedAcuriSaaSServer) GetElementList(context.Context, *GetElementListReq) (*GetElementListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElementList not implemented")
}
func (UnimplementedAcuriSaaSServer) mustEmbedUnimplementedAcuriSaaSServer() {}

// UnsafeAcuriSaaSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcuriSaaSServer will
// result in compilation errors.
type UnsafeAcuriSaaSServer interface {
	mustEmbedUnimplementedAcuriSaaSServer()
}

func RegisterAcuriSaaSServer(s grpc.ServiceRegistrar, srv AcuriSaaSServer) {
	s.RegisterService(&AcuriSaaS_ServiceDesc, srv)
}

func _AcuriSaaS_GetElementList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetElementListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcuriSaaSServer).GetElementList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acuri.v0.AcuriSaaS/GetElementList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcuriSaaSServer).GetElementList(ctx, req.(*GetElementListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AcuriSaaS_ServiceDesc is the grpc.ServiceDesc for AcuriSaaS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcuriSaaS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acuri.v0.AcuriSaaS",
	HandlerType: (*AcuriSaaSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetElementList",
			Handler:    _AcuriSaaS_GetElementList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acuri.proto",
}
